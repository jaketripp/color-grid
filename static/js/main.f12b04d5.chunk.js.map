{"version":3,"sources":["components/Footer.js","js/color-utils.js","components/Block.js","components/Row.js","components/Grid.js","components/App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","href","Date","getFullYear","differenceBetweenColors","lightest","darkest","map","color","i","calculateStepSize","numberOfSteps","difference","divisor","x","color_utils","createColorArr","colorArr","colorSectionWidth","newColor","push","toRGBString","rgb","Math","round","join","concat","toHexString","rgbArr","hex","toString","length","hexToRgb","result","exec","parseInt","Block","props","colorRGB","Util","colorHex","style","background","Row","row","horizontalSteps","gridTemplateColumns","key","Grid","table","verticalSteps","gridTemplateRows","id","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","whichCorner","newState","displayColorPicker","state","colorPickerColor","setState","handleClose","handleChange","createColorTable","_this$state","topLeft","topRight","bottomLeft","bottomRight","topLeftRGB","bottomLeftRGB","leftColorArr","topRightRGB","bottomRightRGB","rightColorArr","leftCell","rightCell","_this2","colorTable","onClick","lib","onChangeComplete","js_default","minValue","maxValue","value","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f12b04d5.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Footer() {\n  return (\n    <div className=\"footer\">\n      <p>\n        <a href=\"https://jaketripp.com/\">\n          Jake Tripp &copy; {new Date().getFullYear()}\n        </a>\n      </p>\n    </div>\n  );\n}\n","// returns the section to split up, aka space between lightest to darkest\n// i.e. [121, 133, 134]\nfunction differenceBetweenColors(lightest, darkest) {\n  return lightest.map((color, i) => {\n    return color - darkest[i];\n  });\n}\n\n// takes in the difference between colors array and the number of steps i.e. [100,100,100] and 5\n// returns 25, 25, 25\nfunction calculateStepSize(lightest, darkest, numberOfSteps) {\n  const difference = differenceBetweenColors(lightest, darkest);\n  const divisor = numberOfSteps - 1;\n  return difference.map(x => x / divisor);\n}\n\nfunction createColorArr(lightest, darkest, numberOfSteps) {\n  let colorArr = [lightest];\n  const colorSectionWidth = calculateStepSize(lightest, darkest, numberOfSteps);\n  // start newColor as the lightest\n  let newColor = lightest;\n  while (numberOfSteps > 2) {\n    // calculate the new color using the previous new color - the step size\n    newColor = differenceBetweenColors(newColor, colorSectionWidth);\n    colorArr.push(newColor);\n    numberOfSteps--;\n  }\n  colorArr.push(darkest);\n  return colorArr;\n}\n\n// takes in rgb in array form\n// i.e. [255, 255, 255]\n// returns '255, 255, 255' \nfunction toRGBString(x) {\n  const rgb = x.map(Math.round).join(\", \");\n  return `rgb(${rgb})`;\n}\n\n// takes in rgb in array form\n// i.e. [255, 255, 255] \nfunction toHexString(rgbArr) {\n  return '#' + rgbArr.map(x => {\n    const hex = Math.round(x).toString(16)\n    return hex.length === 1 ? '0' + hex : hex\n  }).join('')\n  \n}\n\nfunction hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16)\n      ]\n    : null;\n}\n\nexport default {\n  differenceBetweenColors,\n  calculateStepSize,\n  createColorArr,\n  toRGBString,\n  toHexString,\n  hexToRgb\n};\n","import React from \"react\";\nimport Util from \"../js/color-utils\";\n\nexport default function Block(props) {\n  const colorRGB = Util.toRGBString(props.color);\n  const colorHex = Util.toHexString(props.color);\n  return (\n    <div className=\"block\" style={{ background: colorHex }}>\n      <div className=\"hover\" style={{ background: colorHex }}>\n        <div className=\"rgb\">{colorRGB}</div>\n        <div className=\"hex\">{colorHex}</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Block from \"./Block\";\n\nexport default function Row(props) {\n  const { row, horizontalSteps } = props;\n  const style = {\n    gridTemplateColumns: `repeat(${horizontalSteps}, 1fr)`,    \n  };\n  return (\n    <div className=\"row\" style={style}>\n      {row.map((color, i) => {\n        return <Block color={color} key={i}/>;\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Row from \"./Row\";\n\nexport default function Grid(props) {\n  const { table, horizontalSteps, verticalSteps } = props;\n  const style = {\n    gridTemplateRows: `repeat(${verticalSteps}, 1fr)`\n  };\n  return (\n    <div id=\"grid\" style={style}>\n      {table.map((row, i) => {\n        return <Row row={row} key={i} horizontalSteps={horizontalSteps}/>\n      })}\n    </div>\n  );\n}\n","// packages\nimport React, { Component } from \"react\";\nimport { ChromePicker } from \"react-color\";\nimport InputRange from \"react-input-range\";\n\n// components\nimport Footer from \"./Footer\";\nimport Grid from \"./Grid\";\n\nimport Util from \"../js/color-utils\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topLeft: \"#78E08F\",\n      topRight: \"#F1C40F\",\n      bottomLeft: \"#079992\",\n      bottomRight: \"#E9A69F\",\n      verticalSteps: 9,\n      horizontalSteps: 16,\n      whichCorner: \"\",\n      displayColorPicker: false,\n      colorPickerColor: \"\"\n    };\n  }\n\n  // set which color you're currently editing\n  handleClick = whichCorner => () => {\n    const newState = {};\n\n    // toggle display\n    newState.displayColorPicker = !this.state.displayColorPicker;\n\n    // update whichCorner you clicked\n    newState.whichCorner = whichCorner;\n\n    // update colorPickerColor to initialize with whichCorner you clicked\n    newState.colorPickerColor = this.state[whichCorner];\n\n    this.setState(newState);\n  };\n\n  // hide color picker and reset whichCorner\n  handleClose = () => {\n    this.setState({ displayColorPicker: false, whichCorner: \"\" });\n  };\n\n  // update correct color\n  handleChange = color => {\n    if (this.state.whichCorner) {\n      const newState = {};\n      newState[this.state.whichCorner] = color.hex;\n      newState.colorPickerColor = color.hex;\n      this.setState(newState);\n    }\n  };\n\n  createColorTable = () => {\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight,\n      verticalSteps,\n      horizontalSteps\n    } = this.state;\n\n    const topLeftRGB = Util.hexToRgb(topLeft);\n    const bottomLeftRGB = Util.hexToRgb(bottomLeft);\n    const leftColorArr = Util.createColorArr(\n      topLeftRGB,\n      bottomLeftRGB,\n      verticalSteps\n    );\n\n    const topRightRGB = Util.hexToRgb(topRight);\n    const bottomRightRGB = Util.hexToRgb(bottomRight);\n    const rightColorArr = Util.createColorArr(\n      topRightRGB,\n      bottomRightRGB,\n      verticalSteps\n    );\n\n    // iterate vertically and make new array of rows\n    return leftColorArr.map((leftCell, i) => {\n      const rightCell = rightColorArr[i];\n      return Util.createColorArr(leftCell, rightCell, horizontalSteps);\n    });\n  }\n\n  render() {\n    const colorTable = this.createColorTable();\n\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <div className=\"form\">\n            <div className=\"form-colors\">\n              <div className=\"color-buttons\">\n                <div\n                  className=\"color-picker-button\"\n                  onClick={this.handleClick(\"topLeft\")}\n                >\n                  <div style={{ background: this.state.topLeft }} />\n                </div>\n                <div\n                  className=\"color-picker-button\"\n                  onClick={this.handleClick(\"topRight\")}\n                >\n                  <div style={{ background: this.state.topRight }} />\n                </div>\n                <div\n                  className=\"color-picker-button\"\n                  onClick={this.handleClick(\"bottomLeft\")}\n                >\n                  <div style={{ background: this.state.bottomLeft }} />\n                </div>\n                <div\n                  className=\"color-picker-button\"\n                  onClick={this.handleClick(\"bottomRight\")}\n                >\n                  <div style={{ background: this.state.bottomRight }} />\n                </div>\n              </div>\n\n              {this.state.displayColorPicker && (\n                <div className=\"popover\">\n                  <div className=\"cover\" onClick={this.handleClose} />\n                  <ChromePicker\n                    color={this.state.colorPickerColor}\n                    onChangeComplete={this.handleChange}\n                  />\n                </div>\n              )}\n            </div>\n\n            <div className=\"form-steps\">\n              <div className=\"input-container\">\n                <label>Rows:</label>\n                <InputRange\n                  minValue={2}\n                  maxValue={16}\n                  value={this.state.verticalSteps}\n                  onChange={value => this.setState({ verticalSteps: value })}\n                />\n              </div>\n\n              <div className=\"input-container\">\n                <label>Columns:</label>\n                <InputRange\n                  minValue={2}\n                  maxValue={16}\n                  value={this.state.horizontalSteps}\n                  onChange={value => this.setState({ horizontalSteps: value })}\n                />\n              </div>\n            </div>\n          </div>\n\n          <h1>Color Grid</h1>\n        </div>\n        <Grid\n          table={colorTable}\n          verticalSteps={this.state.verticalSteps}\n          horizontalSteps={this.state.horizontalSteps}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./styles/main.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}